# -*- coding: utf-8 -*-
# Generated by Django 1.11.4 on 2017-09-22 00:53
from __future__ import unicode_literals

from django.db import migrations


def populate_flow_sentences(apps, schema_editor):
    Source = apps.get_model('Products', 'Source')
    Command = apps.get_model('Products', 'Command')
    Argument = apps.get_model('Products', 'Argument')

    source, created = Source.objects.get_or_create(
        name="CTA Framework",
        version="2.0",
        category=1
    )

    # FOR
    for_command, created = Command.objects.get_or_create(
        name="for in"
    )

    start, created = Argument.objects.get_or_create(name="start", description="N/A", needs_value=True, requirement=True)
    end, created = Argument.objects.get_or_create(name="end", description="N/A", needs_value=True, requirement=True)
    for_command.arguments.add(start)
    for_command.arguments.add(end)
    for_command.source.add(source)
    for_command.save()

    # FOR in range
    for_in_command, created = Command.objects.get_or_create(
        name="for in range"
    )

    start, created = Argument.objects.get_or_create(name="start", description="N/A", needs_value=True, requirement=True)
    end, created = Argument.objects.get_or_create(name="end", description="N/A", needs_value=True, requirement=True)
    for_in_command.arguments.add(start)
    for_in_command.arguments.add(end)
    for_in_command.source.add(source)
    for_in_command.save()

    # Comment
    comment_command, created = Command.objects.get_or_create(
        name="comment"
    )
    comment, created = Argument.objects.get_or_create(name="comment", description="N/A", needs_value=True,
                                                      requirement=True)
    comment_command.arguments.add(comment)
    comment_command.source.add(source)
    comment_command.save()

    # Variable
    variable_command, created = Command.objects.get_or_create(
        name="variable"
    )
    name, created = Argument.objects.get_or_create(name="name", description="N/A", needs_value=True, requirement=True)
    value, created = Argument.objects.get_or_create(name="value", description="N/A", needs_value=True, requirement=True)
    variable_command.arguments.add(name)
    variable_command.arguments.add(value)
    variable_command.source.add(source)
    variable_command.save()

    # Global Variable
    g_variable_command, created = Command.objects.get_or_create(
        name="Global Variable"
    )
    name_g, created = Argument.objects.get_or_create(name="name", description="N/A", needs_value=True, requirement=True)
    value_g, created = Argument.objects.get_or_create(name="value", description="N/A", needs_value=True,
                                                      requirement=True)
    g_variable_command.arguments.add(name_g)
    g_variable_command.arguments.add(value_g)
    g_variable_command.source.add(source)
    g_variable_command.save()

    # List
    list_command, created = Command.objects.get_or_create(
        name="List"
    )
    name, created = Argument.objects.get_or_create(name="name", description="N/A", needs_value=True, requirement=True)
    value, created = Argument.objects.get_or_create(name="value", description="N/A", needs_value=True, requirement=True)
    list_command.arguments.add(name)
    list_command.arguments.add(value)
    list_command.source.add(source)
    list_command.save()

    # command
    command_command, created = Command.objects.get_or_create(
        name="command"
    )
    command_name, created = Argument.objects.get_or_create(name="name", description="N/A", needs_value=True,
                                                           requirement=True)
    command_command.arguments.add(command_name)
    command_command.source.add(source)
    command_command.save()

    # Tags
    tags_command, created = Command.objects.get_or_create(
        name="tags"
    )

    tags, created = Argument.objects.get_or_create(name="tags", description="N/A", needs_value=True, requirement=True)
    name, created = Argument.objects.get_or_create(name="name", description="N/A", needs_value=True, requirement=True)
    tags_command.arguments.add(name)
    tags_command.arguments.add(tags)
    tags_command.source.add(source)
    tags_command.save()
    print('\n  --------------------------------------- Control Flow Sentences Created :3 --------------------------')


def reverse_func(apps, schema_editor):
    Command = apps.get_model("Products", "Command")
    db_alias = schema_editor.connection.alias
    Command.objects.using(db_alias).filter(source__category=1).delete()


class Migration(migrations.Migration):
    dependencies = [
        ('Products', '0001_initial'),
    ]

    operations = [
        migrations.RunPython(populate_flow_sentences, reverse_func),
    ]
